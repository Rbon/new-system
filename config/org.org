  #+title:Org Mode Configuration
#+PROPERTY: header-args :mkdirp yes :tangle ~/.emacs.d/tangled/org.el
** Keybinds
#+name: keybind-table
| Key        | Command              | Mode    | Map     | Description             |
|------------+----------------------+---------+---------+-------------------------|
| <menu> b i | indent-buffer        | org     | org     | Indent this buffer      |
| <menu> f s | save-buffer          | org     | org     | Save this buffer's file |
| <menu> q c | org-edit-src-abort   | org-src | org-src | Cancel editing          |
| <menu> q f | org-edit-src-exit    | org-src | org-src | Finish editing          |
| <menu> o   | (keymap)             | org     | org     | Org                     |
| <menu> o e | org-edit-special     | org     | org     | Edit this thing         |
| <menu> o s | org-table-sort-lines | org     | org     | Sort this table         |

*** Plumbing
#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t; -*-
#+END_SRC

#+begin_src emacs-lisp :var keybind-table=keybind-table :lexical yes :results none
  (pcase-dolist (`(,key ,command ,mode ,map ,desc) keybind-table)
    (let ((hook (intern (concat mode "-mode-hook")))
          (mode (intern (concat mode "-mode")))
          (map (symbol-value (intern (concat map "-mode-map"))))
          (command (car (read-from-string command))))
      (add-hook hook (lambda () (define-key map (kbd key) command)))
      (which-key-add-major-mode-key-based-replacements mode key desc)))
#+end_src

** Misc

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook (lambda () (setq org-hidden-keywords '(title)))))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook (setq org-src-fontify-natively t))

  (with-eval-after-load 'org
    (custom-set-faces
     '(org-block-begin-line ((t (:inherit fixed-pitch :foreground "#93a1a1" :background "#073642" :extend t))))
     '(org-block ((t (:inherit fixed-pitch :background "#073642" :extend t))))
     '(org-block-end-line ((t (:inherit fixed-pitch :foreground "#93a1a1" :background "#073642" :extend t)))))
     ;; '(org-block-begin-line ((t (:inherit fixed-pitch :foreground "#93a1a1" :background "#eee8d5" :extend t))))
     ;; '(org-block ((t (:inherit fixed-pitch :background "#eee8d5" :extend t))))
     ;; '(org-block-end-line ((t (:inherit fixed-pitch :foreground "#93a1a1" :background "#eee8d5" :extend t)))))
    )
  ;; (custom-theme-set-faces
  ;;  'user
  ;;  '(org-block-begin-line
  ;;   ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
  ;;  '(org-block-background
  ;;   ((t (:background "#FFFFEA"))))
  ;;  '(org-block-end-line
  ;;   ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
  ;; '(org-block ((t (:inherit fixed-pitch :background "#eee8d5"))))
  ;; '(org-block-begin-line ((t (:inherit fixed-pitch :foreground "#93a1a1" :background "#eee8d5"))))
  ;; '(org-block-end-line ((t (:inherit fixed-pitch :foreground "#93a1a1" :background "#eee8d5"))))
  ;; '(org-block-background ((t (:inherit fixed-pitch))))
  ;; '(org-code ((t (:inherit (shadow fixed-pitch)))))
  ;; '(org-document-info ((t (:foreground "dark orange"))))
  ;; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
  ;; '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
  ;; '(org-link ((t (:foreground "royal blue" :underline t))))
  ;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;; '(org-property-value ((t (:inherit fixed-pitch))) t)
  ;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
  ;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
  ;; '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))))
#+end_src

Make src block editors obey the =display-buffer-alist= rules.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (setq org-src-window-setup 'plain)))
#+end_src

