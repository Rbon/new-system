#+title: Core Configuration
#+PROPERTY: header-args :mkdirp yes :tangle ~/.emacs.d/tangled/core.el
#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t; -*-
  (setq inhibit-startup-screen t)
  (setq-default cursor-type 'bar)
  (setq debug-on-error t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  ;; (global-unset-key (kbd "<escape> <escape> <escape>"))
  (require 'org-tempo)
  ;; (setq-default org-confirm-babel-evaluate nil)
  ;; (global-set-key (kbd "C-c C-c") 'abnormal-mode)
  ;; abnormal mode {
  ;; (make-variable-buffer-local
  ;; (defvar abnormal-mode nil
  ;;   "Toggle dotcrafter basic mode."))


  (add-hook 'apropos-mode-hook
            (lambda () (setq cursor-type nil)))

  (define-minor-mode abnormal-mode
    "It's not normal."
    :init-value nil)

  (defvar abnormal-mode-map (make-sparse-keymap)
    "The keymap for abnormal-mode.")

  (defvar abnormal-mode-hook nil
    "The hook for abnormal-mode.")

                                          ; (setq-default abnormal-mode t)
  (add-to-list 'minor-mode-alist '(abnormal-mode " abnormal"))
  (add-to-list 'minor-mode-map-alist (cons 'abnormal-mode abnormal-mode-map))


  (defun abnormal-mode ()
    (interactive)
    (setq abnormal-mode (not abnormal-mode))

    ;; Take some action when enabled or disabled
    (if abnormal-mode
        (progn
          (message "abnormal-mode activated!")
          (setq cursor-type 'box)
          (global-unset-key (kbd "<escape>")))
      (progn
        (message "abnormal-mode deactivated!")
        (setq cursor-type 'bar)
        (global-set-key (kbd "<escape>") 'abnormal-mode))))

  (defun abnormal-init ()
    (abnormal-mode))

  ;; (add-hook 'apropos-mode-hook     #'abnormal-mode)
  ;; (add-hook 'emacs-lisp-mode-hook  #'abnormal-mode)
  ;; (add-hook 'help-mode-hook        #'abnormal-mode)
  ;; (add-hook 'debugger-mode-hook    #'abnormal-mode)
  ;; (add-hook 'org-mode-hook         #'abnormal-mode)

  ;; Define a key in the keymap
  (define-key abnormal-mode-map (kbd "C-c C-. t")
    (lambda ()
      (interactive)
      (message "abnormal key binding used!")))
  (defun test ()
    (interactive)
    (message "This is a test!"))

  (defun define-multiple-keys (map bindings)
    (dolist (b bindings)
      (define-key map (kbd (car b)) (nth 1 b))))

  (defun jump-to-mark ()
    (interactive)
    (goto-char (mark-marker)))

  (defun kill-all-word ()
    (interactive)
    (call-interactively 'left-word)
    (call-interactively 'kill-word))

  (defun mark-whole-word ()
    (interactive)
    (call-interactively 'right-word)
    (call-interactively 'left-word)
    (call-interactively 'mark-word))

  (defun indent-buffer ()
    (interactive)
    (call-interactively 'mark-whole-buffer)
    (call-interactively 'indent-region))

  (defun insert-at-start-of-text ()
    (interactive)
    (call-interactively 'beginning-of-line-text)
    (call-interactively 'abnormal-mode))

  (defun insert-at-new-line ()
    (interactive)
    (call-interactively 'end-of-line)
    (call-interactively 'newline)
    (call-interactively 'abnormal-mode))

  (defun mark-line ()
    (interactive)
    (call-interactively 'beginning-of-visual-line)
    (call-interactively 'next-line)
    (call-interactively 'beginning-of-visual-line)
    (call-interactively 'set-mark-command)
    (call-interactively 'previous-line)
    (call-interactively 'beginning-of-visual-line))

  (defun insert-at-end-of-line ()
    (interactive)
    (call-interactively 'end-of-line)
    (call-interactively 'abnormal-mode))


  (defun mpv-play-url (url &rest args)
    (interactive)
    (start-process "mpv" nil "mpv" url))


  (defun my/find-config-file ()
    (interactive)
    (cd "~/.emacs.d/config/")
    (call-interactively 'find-file))

  ;; (defun my/bind-from-strings (mode map key desc command)
  ;; (let ((hook (intern (concat mode "-mode-hook")))
  ;; (mode (intern (concat mode "-mode")))
  ;; (map (symbol-value (intern (concat map "-mode-map"))))
  ;; (command (car (read-from-string command))))
  ;; (add-hook hook (lambda () (define-key map (kbd key) command)))
  ;; (which-key-add-major-mode-key-based-replacements mode key desc)))


  (defun my/bind-from-table (bind-table) 
    (pcase-dolist (`(,key ,command ,mode ,map ,desc) bind-table)
      (let ((hook (intern (concat mode "-mode-hook")))
            (mode (intern (concat mode "-mode")))
            (map (symbol-value (intern (concat map "-mode-map"))))
            (command (car (read-from-string command))))
        (add-hook hook (lambda () (define-key map (kbd key) command)))
        (which-key-add-major-mode-key-based-replacements mode key desc))))
#+end_src
